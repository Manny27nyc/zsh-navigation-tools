# Copy this file into /usr/share/zsh/site-functions/
# and add 'autoload n-list-draw` to .zshrc

emulate -L zsh

zmodload zsh/curses

setopt localoptions typesetsilent extendedglob

_nlist_expand_tabs() {
    local chunk="$1"
    integer before_len="$2"
    REPLY=""

    while [ -n "$chunk" ]; do
        if [[ "$chunk" = (#b)([^$'\t']#)$'\t'(*) ]]; then
            integer left_len="${#match[1]}"
            integer tabs_count_all=$(( (before_len+left_len)/8 ))
            integer all_text_len=$(( (tabs_count_all+1)*8 ))
            integer chunk_padded_len=$(( all_text_len - before_len ))
            REPLY+="${(r:$chunk_padded_len:: :)match[1]}"

            before_len+=chunk_padded_len
            chunk="$match[2]"
        else
            REPLY+="$chunk"
            break
        fi
    done
}


_nlist_print_with_ansi() {
    local win="$1" text="$2" out col
    integer text_offset="$3" max_text_len="$4" text_len=0 no_match=0 nochunk_text_len to_skip_from_chunk to_display_from_chunk remaining_text_len remaining_nochunk_text_len

    # 1 - non-escaped text, 2 - first number in the escaped text, with ;
    # 3 - second number, 4 - text after whole escape text

    typeset -a c
    c=( black red green yellow blue magenta cyan white )

    while [[ -n "$text" && "$no_match" -eq 0 ]]; do
        if [[ "$text" = (#b)([^$'\x1b']#)$'\x1b'\[([0-9][0-9]\;|)([0-9][0-9]|)m(*) ]]; then
            # Text for further processing
            text="$match[4]"
            # Text chunk to output now
            out="$match[1]"
            # Save color
            col="$match[3]"
        else
            out="$text"
            no_match=1
        fi

        if [ -n "$out" ]; then
            _nlist_expand_tabs "$out" "$text_len"
            out="$REPLY"

            # Input text length without the current chunk
            nochunk_text_len=text_len
            # Input text length up to current chunk
            text_len+="$#out"

            # Should start displaying with this chunk?
            # I.e. stop skipping left part of the input text?
            if [ "$text_len" -gt "$text_offset" ]; then
                to_skip_from_chunk=text_offset-nochunk_text_len

                # LEFT - is chunk off the left skip boundary? +1 for 1-based index in string
                [ "$to_skip_from_chunk" -gt 0 ] && out="${out[to_skip_from_chunk+1,-1]}"

                remaining_text_len=text_len-text_offset
                remaining_nochunk_text_len=nochunk_text_len-text_offset

                # RIGHT - is text off the screen?
                if [ "$remaining_text_len" -gt "$max_text_len" ]; then
                    to_display_from_chunk=max_text_len-remaining_nochunk_text_len
                    [ "$to_display_from_chunk" -gt 0 ] && out="${out[1,to_display_from_chunk]}" || out=""
                fi
                
                [ -n "$out" ] && zcurses string "$win" "$out"
            fi
        fi

        if [ "$no_match" -eq 0 ]; then
            if [[ "$col" -ge 30 && "$col" -le 37 ]]; then
                zcurses attr "$win" $c[$(( col - 29 ))]/black
            elif [[ -n "$col" && "$col" -eq 0 ]]; then
                zcurses attr "$win" white/black
            fi
        fi
    done
}

integer highlight="$1"
integer page_height="$2"
integer page_width="$3"
local y_offset="$4"
local x_offset="$5"
local text_offset="$6"
local win="$7"
local ansi_mode="$8"
shift 8
integer max_text_len=page_width-x_offset

[ "$bold" = "0" ] && bold="" || bold="+bold"
[ "$ansi_mode" = "ansi" ] && zcurses attr "$win" $bold white/black

integer end_idx=1+page_height-1
[ "$end_idx" -gt "$#" ] && end_idx="$#"
integer y=y_offset

integer i
for (( i=1; i<=end_idx; i++ )); do
    zcurses move "$win" $y "$x_offset"

    [ "$i" = "$highlight" ] && zcurses attr "$win" +reverse
    if [ "$ansi_mode" != "ansi" ]; then
        # TODO horizontal scroll
        _nlist_expand_tabs "$@[i]"
        local text="$REPLY"
        integer text_len="${#text}"

        [ "$text_len" -gt "$max_text_len" ] && text="${text[1,$max_text_len]}"
        zcurses string "$win" "$text"
    else
        _nlist_print_with_ansi "$win" "$@[i]" "$text_offset" "$max_text_len"
    fi
    [ "$i" = "$highlight" ] && zcurses attr "$win" -reverse

    y+=1
done

zcurses attr "$win" white/black
# vim: set filetype=zsh:
